{"version":3,"sources":["assets/images/logo.svg","assets/images/illustration.svg","components/Button.tsx","services/firebase.ts","contexts/AuthContext.tsx","hooks/useAuth.ts","pages/NewRoom.tsx","assets/images/google-icon.svg","pages/Home.tsx","components/Question.tsx","assets/images/copy.svg","components/roomCode.tsx","hooks/useRoom.tsx","pages/Room.tsx","assets/images/delete.svg","assets/images/check.svg","assets/images/answer.svg","pages/AdminRoom.tsx","App.tsx","index.tsx"],"names":["Button","isOutlined","props","className","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","NewRoom","history","useHistory","newRoom","setNewRoom","event","preventDefault","trim","roomRef","ref","push","title","authorId","firebaseRoom","key","src","illustration","alt","logoImg","onSubmit","type","placeholder","onChange","target","to","Home","roomCode","setRoomCode","get","exists","alert","val","endedAt","onClick","googleIconImg","Question","content","author","isAnswered","isHighlighted","cx","answered","highlighted","RoomCode","navigator","clipboard","writeText","code","copyImg","useRoom","roomId","questions","setQuestions","setTitle","on","room","databaseRoom","firebaseQuestions","parsedQuestions","Object","entries","map","likeCount","values","likes","length","likeId","find","off","Room","params","useParams","newQuestion","setNewQuestion","question","questionId","remove","disabled","aria-label","handleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","AdminRoom","update","Date","window","confirm","console","log","handleCheckQuestionAsAnswered","checkImg","handleHighLightQuestion","answerImg","handleDeleteQuestion","deleteImg","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ad5b97a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","import {ButtonHTMLAttributes} from 'react';\n\nimport '../styles/button.scss';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n\tisOutlined?: boolean\n};\n\nexport function Button({ isOutlined = false, ...props }: ButtonProps){\n\n\treturn (\n\t\t<button className={`button ${isOutlined? 'outlined': ''}`} \n\t\t{...props}\n\t\t/>\n\t)\n}","import firebase from 'firebase/app';\r\n\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY ,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN ,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL ,\r\n  projectId: process.env.REACT_APP_PROJECT_ID ,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET ,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID ,\r\n  appId: process.env.REACT_APP_APP_ID \r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst database = firebase.database();\r\n\r\nexport { firebase, auth,database};","import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport { auth, firebase } from \"../services/firebase\";\r\n\r\ntype User = {\r\n  id: string;\r\n  name: string;\r\n  avatar: string;\r\n}\r\n\r\ntype AuthContextType = {\r\n  user: User | undefined;\r\n  signInWithGoogle: () => Promise<void>;\r\n}\r\n\r\ntype AuthContextProviderProps = {\r\n\tchildren: ReactNode;\r\n} \r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps) {\r\n  const [user, setUser] =useState<User>();\r\n\r\n  useEffect(()=>{\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      if(user){\r\n        const { displayName, photoURL, uid } =user;\r\n\r\n        if(!displayName || !photoURL){\r\n          throw new Error('Missing information frmo Google Account.');\r\n        }\r\n\r\n        setUser({\r\n          id: uid,\r\n          name: displayName,\r\n          avatar: photoURL\r\n        })\r\n\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  },[])\r\n\r\n  async function signInWithGoogle(){\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    const result = await auth.signInWithPopup(provider); \r\n\r\n    if (result.user){\r\n      const { displayName, photoURL, uid } = result.user;\r\n\r\n      if(!displayName || !photoURL){\r\n        throw new Error('Missing information frmo Google Account.');\r\n      }\r\n\r\n      setUser({\r\n        id: uid,\r\n        name: displayName,\r\n        avatar: photoURL\r\n      })\r\n    }\r\n  }\r\n\treturn (\r\n\t<AuthContext.Provider value={{user, signInWithGoogle}}>\r\n\t\t{props.children}\r\n\t</AuthContext.Provider>\r\n\r\n\t);\r\n}","import { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nexport function useAuth(){\r\n\tconst value = useContext(AuthContext);\r\n\r\n\treturn value;\r\n}","import {FormEvent, useState} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport illustration from '../assets/images/illustration.svg';\r\n\r\nimport { Button } from '../components/Button';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nimport '../styles/auth.scss';\r\nimport { database } from '../services/firebase';\r\n\r\nexport function NewRoom(){\r\n\tconst {user}= useAuth();\r\n\tconst history = useHistory();\r\n\tconst [newRoom,setNewRoom] = useState('');\r\n\r\n\tasync function handleCreatRoom(event: FormEvent){\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif (newRoom.trim() === ''){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst roomRef = database.ref('rooms');\r\n\r\n\t\tconst firebaseRoom = await roomRef.push({\r\n\t\t\ttitle: newRoom,\r\n\t\t\tauthorId: user?.id,\r\n\t\t});\r\n\r\n\t\thistory.push(`/rooms/${firebaseRoom.key}`)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id=\"page-auth\">\r\n\t\t\t<aside>\r\n\t\t\t\t<img src={illustration} alt=\"Ilustração simbolizando perguntas e respostas\" />\r\n\t\t\t\t<strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n\t\t\t\t<p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n\t\t\t</aside>\r\n\t\t\t<main>\r\n\t\t\t\t{/*<h1>{value}</h1>*/}\r\n\t\t\t\t<div className=\"main-content\">\r\n\t\t\t\t\t<img src={logoImg} alt=\"letmeask\"/>\r\n\t\t\t\t\t<h2>Criar uma nova sala</h2>\r\n\t\t\t\t\t<form onSubmit={handleCreatRoom}>\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\tplaceholder=\"Nome da Sala\"\r\n\t\t\t\t\t\t\tonChange={event=> setNewRoom(event.target.value)}\r\n\t\t\t\t\t\t\tvalue={newRoom}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type=\"submit\">\r\n\t\t\t\t\t\t\t\tCriar Sala\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<p>Quer entrar em uma sala existente?<Link to=\"/\">clique aqui</Link></p>\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t)\r\n}","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import { FormEvent, useState } from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport illustration from '../assets/images/illustration.svg';\r\nimport googleIconImg from '../assets/images/google-icon.svg';\r\n\r\nimport { database } from '../services/firebase';\r\n\r\nimport { Button } from '../components/Button';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nimport '../styles/auth.scss';\r\n\r\nexport function Home(){\r\n\tconst history = useHistory();\r\n\tconst { user,signInWithGoogle }= useAuth();\r\n\tconst [roomCode,setRoomCode] = useState('')\r\n\r\n\tasync function handleCreatRoom(){\r\n\t\tif(!user){\r\n\t\t\tawait signInWithGoogle();\r\n\t\t}\r\n\t\thistory.push('/rooms/new');\r\n\t}\r\n\r\n\tasync function handleJoinRoom(event: FormEvent){\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif (roomCode.trim() === ''){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst roomRef = await database.ref(`rooms/${roomCode}`).get(); //o .get() retorna todos os dados da sala\r\n\r\n\t\tif (!roomRef.exists()){\r\n\t\t\talert('Room does not exists');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (roomRef.val().endedAt) {\r\n\t\t\talert('Room already closed :(')\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\thistory.push(`/rooms/${roomCode}`);\r\n\t}\r\n\treturn (\r\n\t\t<div id=\"page-auth\">\r\n\t\t\t<aside>\r\n\t\t\t\t<img src={illustration} alt=\"Ilustração simbolizando perguntas e respostas\" />\r\n\t\t\t\t<strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n\t\t\t\t<p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n\t\t\t</aside>\r\n\t\t\t<main>\r\n\t\t\t\t{/*<h1>{value}</h1>*/}\r\n\t\t\t\t<div className=\"main-content\">\r\n\t\t\t\t\t<img src={logoImg} alt=\"letmeask\"/>\r\n\t\t\t\t\t<button onClick={handleCreatRoom} className=\"creat-room\">\r\n\t\t\t\t\t\t<img src={googleIconImg} alt=\"Logo do Google\" />\r\n\t\t\t\t\t\tCrie a sua sala com o Google\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<div className=\"separator\">ou entre em uma sala</div>\r\n\t\t\t\t\t<form onSubmit={handleJoinRoom}>\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\tplaceholder=\"Digite o codigo da sala\"\r\n\t\t\t\t\t\t\tonChange={event=> setRoomCode(event.target.value)}\r\n\t\t\t\t\t\t\tvalue={roomCode}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type=\"submit\">\r\n\t\t\t\t\t\t\tEntrar na sala\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t)\r\n}","import {ReactNode} from 'react';\r\nimport cx from 'classnames';\r\n\r\nimport '../styles/question.scss';\r\n\r\ntype QuestionProps = {\r\n\tcontent: string;\r\n\tauthor: {\r\n\t\tname: string;\r\n\t\tavatar: string;\r\n\t};\r\n\tchildren?: ReactNode;\r\n\tisHighlighted?: boolean;\r\n\tisAnswered?: boolean;\r\n}\r\n\r\n\r\nexport function Question({\r\n\tcontent,\r\n\tauthor,\r\n\tisAnswered = false,\r\n\tisHighlighted = false,\r\n\tchildren\r\n}: QuestionProps) {\r\n\treturn (\r\n\t\t<div className={cx(\r\n\t\t\t'question',\r\n\t\t\t{ answered: isAnswered },\r\n\t\t\t{ highlighted: isHighlighted && !isAnswered },\r\n\t\t)}>\r\n\t\t\t<p>{content}</p>\r\n\t\t\t<footer>\r\n\t\t\t\t<div className=\"user-info\">\r\n\t\t\t\t\t<img src={author.avatar} alt={author.name}/>\r\n\t\t\t\t\t<span>{author.name}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t</footer>\r\n\t\t</div>\r\n\t)\r\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from '../assets/images/copy.svg';\r\n\r\nimport '../styles/room-code.scss'\r\n\r\ntype RoomCodeProps = {\r\n\tcode: string;\r\n}\r\n\r\nexport function RoomCode (props: RoomCodeProps){\r\n\tfunction copyRoomCodeToClipboard() {\r\n\t\tnavigator.clipboard.writeText(props.code);\r\n\t}\r\n\r\n\treturn(\r\n\t\t<button className=\"room-code\" onClick={copyRoomCodeToClipboard}>\r\n\t\t\t<div>\r\n\t\t\t\t<img src={copyImg} alt=\"Copy room code\"/>\r\n\t\t\t</div>\r\n\t\t\t<span>Sala #{props.code}</span>\r\n\t\t</button>\r\n\t)\r\n}","import { useEffect, useState } from \"react\"\r\nimport { database } from \"../services/firebase\";\r\nimport { useAuth } from \"./useAuth\";\r\n\r\ntype QuestionType ={\r\n\tid: string;\r\n\tauthor: {\r\n\t\tname: string;\r\n\t\tavatar: string;\r\n\t}\r\n\tcontent: string;\r\n\tisAnswered: boolean;\r\n\tisHighlighted: boolean;\r\n\tlikeCount: number;\r\n\tlikeId: string | undefined;\r\n}\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n\tauthor: {\r\n\t\tname: string;\r\n\t\tavatar: string;\r\n\t}\r\n\tcontent: string;\r\n\tisAnswered: boolean;\r\n\tisHighlighted: boolean;\r\n\tlikes: Record<string, {\r\n\t\tauthorId: string;\r\n\t}>\r\n}>\r\n\r\nexport function useRoom(roomId: string){\r\n\tconst { user } = useAuth();\r\n\tconst [questions, setQuestions] =useState<QuestionType[]>([])\r\n\tconst [title, setTitle] = useState('')\r\n\r\n\tuseEffect(() => {\r\n\t\tconst roomRef = database.ref(`rooms/${roomId}`);\r\n\r\n\t\troomRef.on('value', room => {\r\n\t\t\tconst databaseRoom = room.val();\r\n\t\t\tconst firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n\r\n\t\t\tconst parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: key,\r\n\t\t\t\t\tcontent: value.content,\r\n\t\t\t\t\tauthor: value.author,\r\n\t\t\t\t\tisHighlighted: value.isHighlighted,\r\n\t\t\t\t\tisAnswered: value.isAnswered,\r\n\t\t\t\t\tlikeCount: Object.values(value.likes ?? {}).length,\r\n\t\t\t\t\tlikeId: Object.entries(value.likes ?? {}).find(([key, like])=> like.authorId === user?.id)?.[0],\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetTitle(databaseRoom.title);\r\n\t\t\tsetQuestions(parsedQuestions);\r\n\t\t})\r\n\r\n\t\treturn () => {\r\n\t\t\troomRef.off('value');\r\n\t\t}\r\n\t},[roomId, user?.id]);\r\n\r\n\treturn {questions,title}\r\n}","import { FormEvent, useState } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/roomCode';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss'\r\n\r\ntype RoomParams = {\r\n\tid: string;\r\n}\r\n\r\nexport function Room(){\r\n\tconst {user} = useAuth();\r\n\tconst params = useParams<RoomParams>();\r\n\tconst [newQuestion, setNewQuestion] = useState('');\r\n\tconst roomId = params.id;\r\n\t\r\n\tconst {questions,title} = useRoom(roomId);\r\n\r\n\t\r\n\tasync function handleSendQuestion(event: FormEvent){\r\n\t\tevent.preventDefault();\r\n\t\t\r\n\t\tif (newQuestion.trim() === '') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (!user) {\r\n\t\t\tthrow new Error('You must be logged in')\r\n\t\t}\r\n\t\t\r\n\t\tconst question = {\r\n\t\t\tcontent: newQuestion,\r\n\t\t\tauthor: {\r\n\t\t\t\tname: user.name,\r\n\t\t\t\tavatar: user.avatar\r\n\t\t\t},\r\n\t\t\tisHighlighted: false,\r\n\t\t\tisAnswered: false\r\n\t\t}\r\n\t\t\r\n\t\tawait database.ref(`rooms/${roomId}/questions`).push(question);\r\n\t\t\r\n\t\tsetNewQuestion('');\r\n\t\t\r\n\t}\r\n\t\r\n\tasync function handleLikeQuestion(questionId: string, likeId: string | undefined){\r\n\t\tif (likeId) {\r\n\t\tawait database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove();\r\n\t\t} else {\r\n\t\tawait database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push({\r\n\t\t\tauthorId: user?.id,\r\n\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div id=\"page-room\">\r\n\t\t\t<header>\r\n\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t<img src={logoImg} alt=\"Letmeask\" />\r\n\t\t\t\t\t<RoomCode code={roomId}/>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<main >\r\n\t\t\t\t<div className=\"room-title\">\r\n\t\t\t\t\t<h1>Sala {title}</h1>\r\n\t\t\t\t\t{ questions.length > 0 && <span>{questions.length} peguntas</span>}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<form onSubmit={handleSendQuestion}>\r\n\t\t\t\t\t<textarea \r\n\t\t\t\t\t\tplaceholder=\"O que você quer perguntar?\"\r\n\t\t\t\t\t\tonChange={event => setNewQuestion(event.target.value)}\r\n\t\t\t\t\t\tvalue={newQuestion}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"form-footer\">\r\n\t\t\t\t\t\t{ user ? (\r\n\t\t\t\t\t\t\t<div className=\"user-info\">\r\n\t\t\t\t\t\t\t\t<img src={user.avatar} alt={user.name} />\r\n\t\t\t\t\t\t\t\t<span>{user.name}</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\r\n\t\t\t\t\t\t) }\r\n\t\t\t\t\t\t<Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<div className=\"question-list\">\r\n\t\t\t\t\t{questions.map( question => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Question \r\n\t\t\t\t\t\t\tkey={question.id}\r\n\t\t\t\t\t\t\tcontent={question.content}\r\n\t\t\t\t\t\t\tauthor={question.author}\r\n\t\t\t\t\t\t\tisAnswered={question.isAnswered}\r\n\t\t\t\t\t\t\tisHighlighted={question.isHighlighted}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{ !question.isAnswered && (\r\n\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={`like-button ${question.likeId ? 'liked' : ''}`}\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\taria-label=\"Marcar como gostei\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleLikeQuestion(question.id, question.likeId)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{ question.likeCount > 0 && <span>{question.likeCount}</span> }\r\n\t\t\t\t\t\t\t\t\t\t\t<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Question>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","import {useHistory, useParams} from 'react-router-dom';\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport deleteImg from '../assets/images/delete.svg'\r\n\r\nimport checkImg from '../assets/images/check.svg';\r\nimport answerImg from '../assets/images/answer.svg';\r\nimport { Button } from '../components/Button';\r\nimport { Question } from '../components/Question';\r\nimport { RoomCode } from '../components/roomCode';\r\n// import { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss'\r\n\r\ntype RoomParams = {\r\n\tid: string;\r\n}\r\n\r\nexport function AdminRoom(){\r\n\t// const {user} = useAuth();\r\n\tconst history = useHistory()\r\n\tconst params = useParams<RoomParams>();\r\n\tconst roomId = params.id;\r\n\r\n\tconst {questions,title} = useRoom(roomId);\r\n\r\n\tconsole.log(questions);\r\n\r\n\tasync function handleEndRoom() {\r\n\t\tawait database.ref(`rooms/${roomId}`).update({\r\n\t\t\tendedAt: new Date(),\r\n\t\t})\r\n\r\n\t\thistory.push('/');\r\n\t}\r\n\r\n\tasync function handleDeleteQuestion(questionId: string){\r\n\t\tif (window.confirm('Tem certeza que deseja excluir essa pergunta?')) {\r\n\t\t\tawait database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\r\n\t\t}\r\n\t}\r\n\r\n\tasync function handleCheckQuestionAsAnswered(questionId: string){\r\n\t\t\tawait database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n\t\t\t\tisAnswered: true,\r\n\t\t\t});\r\n\t}\r\n\r\n\tasync function handleHighLightQuestion(questionId: string){\r\n\t\t\tawait database.ref(`rooms/${roomId}/questions/${questionId}`).update({\r\n\t\t\t\tisHighlighted: true,\r\n\t\t\t});\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div id=\"page-room\">\r\n\t\t\t<header>\r\n\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t<img src={logoImg} alt=\"Letmeask\" />\r\n\t\t\t\t\t<div >\r\n\t\t\t\t\t\t<RoomCode code={roomId}/>\r\n\t\t\t\t\t\t<Button isOutlined onClick={handleEndRoom}>Encerrar Sala</ Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<main >\r\n\t\t\t\t<div className=\"room-title\">\r\n\t\t\t\t\t<h1>Sala {title}</h1>\r\n\t\t\t\t\t{ questions.length > 0 && <span>{questions.length} peguntas</span>}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"question-list\">\r\n\t\t\t\t\t{questions.map( question => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Question \r\n\t\t\t\t\t\t\tkey={question.id}\r\n\t\t\t\t\t\t\tcontent={question.content}\r\n\t\t\t\t\t\t\tauthor={question.author}\r\n\t\t\t\t\t\t\tisAnswered={question.isAnswered}\r\n\t\t\t\t\t\t\tisHighlighted={question.isHighlighted}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{!question.isAnswered && (\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={()=> handleCheckQuestionAsAnswered(question.id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={checkImg} alt=\"Marcar pergunta como respondida\" />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={()=> handleHighLightQuestion(question.id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={answerImg} alt=\"Dar destaque à pergunta\" />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={()=>handleDeleteQuestion(question.id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={deleteImg} alt=\"Remover pergunta\" />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Question>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}","import { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport {NewRoom} from \"./pages/NewRoom\";\nimport {Home} from \"./pages/Home\";\n\nimport {AuthContextProvider} from '../src/contexts/AuthContext';\nimport { Room } from './pages/Room';\nimport { AdminRoom } from './pages/AdminRoom';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n    <AuthContextProvider>\n        <Switch>\n          <Route path=\"/\" exact component={Home}/> {/*//o exact indica q essa pagina só vai abrir caso seja digitado exatamente \"/\"*/}\n          <Route path=\"/rooms/new\" component={NewRoom}/>\n          <Route path=\"/rooms/:id\" component={Room}/>\n          <Route path=\"/admin/rooms/:id\" component={AdminRoom}/>\n        </Switch>\n      </AuthContextProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './services/firebase';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}